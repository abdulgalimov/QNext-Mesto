
const {user, formResult} = qnext.data;
const {type, tg} = formResult.values;
const {italic} = qnext.html;

const info = {
  housing: {
    key: '–° –∂–∏–ª—å–µ–º',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–∂–∏–ª—å–µ',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–∂–∏–ª—å–µ–º',
    }
  },
  psychological: {
    key: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  documents: {
    key: '–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  humanitarian: {
    key: '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  medical: {
    key: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  transport: {
    key: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º',
    }
  },
  contacts: {
    key: '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
  },
  location: {
    key: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
  },
  comments: {
    key: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
  }
};

let message;
let splitter;
let tags = [];
let requestType;
switch (type) {
  case '–ú–æ–≥—É –ø–æ–º–æ—á—å':
    message = `üíô –ú–æ–≥—É –ø–æ–º–æ—á—å.`;
    splitter = 'üîπ';
    requestType = 'can';
    break;
  case '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å':
    message = `‚ù§Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å.`;
    splitter = 'üî∫';
    requestType = 'need';
    break;
}

function addLine(type) {
  const typeData = info[type];
  const {key} = typeData;
  const value = formResult.values[type];
  if (!value) return;
  message += `\n${splitter}${italic(key)}: ${value}`;
  //
  if (typeData[requestType] && typeData[requestType].tag) {
    tags.push(typeData[requestType].tag);
  }
}
addLine('housing');
addLine('psychological');
addLine('documents');
addLine('humanitarian');
addLine('medical');
addLine('transport');
addLine('location');
addLine('contacts');
addLine('comments');

if (tg === '–î–∞') {
  const userText = qnext.html.link(user.name, qnext.urls.user(user));
  message = `${message}
${userText}`;
}

if (tags.length) {
  message = `${message}

${tags.join(' ')}`
}


exports.message = message;
