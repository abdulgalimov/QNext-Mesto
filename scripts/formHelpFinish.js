
const {user, formResult} = qnext.data;
const {givejob, jobtype, joblocation, jobscope, jobabout, type, tg} = formResult.values;
const {italic} = qnext.html;

const info = {
  housing: {
    key: '–° –∂–∏–ª—å–µ–º',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–∂–∏–ª—å–µ',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–∂–∏–ª—å–µ–º',
    }
  },
  psychological: {
    key: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  legal: {
    key: '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  humanitarian: {
    key: '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  medical: {
    key: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_–º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π_–ø–æ–º–æ—â—å—é',
    }
  },
  transport: {
    key: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –ø–æ–º–æ—â—å',
    need: {
      tag: '#—Ç—Ä–µ–±—É–µ—Ç—Å—è_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è_–ø–æ–º–æ—â—å',
    },
    can: {
      tag: '#–ø–æ–º–æ–≥—É_—Å_—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º',
    }
  },
  location: {
    key: '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
  },
  relocation: {
    key: '–†–µ–ª–æ–∫–∞—Ü–∏—è',
  },
  comments: {
    key: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏',
  },
  findjob: {
    key: '–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É'
  },
  givejob: {
    key: '–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É'
  }
};

const canIcon = 'üîπ';
let message;
let splitter;
let tags = [];
let requestType;
switch (type) {
  case '–ú–æ–≥—É –ø–æ–º–æ—á—å':
    message = `üíô –ú–æ–≥—É –ø–æ–º–æ—á—å.`;
    splitter = canIcon;
    requestType = 'can';
    break;
  case '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å':
    message = `‚ù§Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å.`;
    splitter = 'üî∫';
    requestType = 'need';
    break;
}
const doc = {
  type: requestType,
};

function addLine(type) {
  const typeData = info[type];
  const {key} = typeData;
  const value = formResult.values[type];
  if (!value) {
    doc[type] = [];
    return;
  }
  doc[type] = value.split(',');
  message += `\n${splitter}${italic(key)}: ${value}`;
  //
  if (typeData[requestType] && typeData[requestType].tag) {
    tags.push(typeData[requestType].tag);
  }
}
addLine('location');
addLine('relocation');
addLine('housing');
addLine('psychological');
addLine('legal');
addLine('social');
addLine('medical');
addLine('findjob');

if (givejob === '–î–∞') {
  let title;
  switch (jobtype) {
    case '–£–¥–∞–ª–µ–Ω–Ω–æ':
      title = '–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É';
      break;
    case '–õ–æ–∫–∞–ª—å–Ω–æ':
      title = '–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –≤ '+joblocation;
      break;
  }
  if (jobscope) {
    title = `${title}
  –°—Ñ–µ—Ä–∞: ${jobscope.join(', ')}`;
  }
  if (jobabout) {
    title = `${title}
  –û–ø–∏—Å–∞–Ω–∏–µ: ${jobabout}`;
  }
  message += `\n${canIcon}${title}`;
}

addLine('comments');

if (tg === '–î–∞') {
  const userText = qnext.html.link(user.name, qnext.urls.user(user));
  message = `${message}
${userText}`;
}

if (tags.length) {
  message = `${message}

${tags.join(' ')}`
}


exports.message = message;
exports.doc = doc;
